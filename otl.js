// Generated by CoffeeScript 1.3.3
(function() {
  var fs, fse, grunt, parseOl, path, stripFileExtension;

  path = require('path');

  fs = require('fs');

  fse = require('fs-extra');

  grunt = require("grunt");

  stripFileExtension = function(filename) {
    var destName, fsplit;
    fsplit = filename.split('.');
    fsplit.pop();
    return destName = fsplit.join('.');
  };

  parseOl = function(rootdir, subdir, srcName, dstPath) {
    var array, baseIndent, basePath, currLevel, fNameHtml, fNameJade, fNameSrc, fileNameOnly, heading, i, indent, jadeStr, level, line, outL, spacesPerlevel, _i, _len;
    basePath = path.join(rootdir, subdir);
    fNameSrc = path.join(basePath, srcName);
    fileNameOnly = stripFileExtension(srcName);
    fNameJade = path.join(dstPath, subdir, fileNameOnly + '.jade');
    fNameHtml = path.join(dstPath, subdir, fileNameOnly + '.html');
    baseIndent = Array(5).join(' ');
    outL = [];
    array = fs.readFileSync(fNameSrc).toString().split("\n");
    spacesPerlevel = 2;
    indent = function(level) {
      var s;
      if (level == null) {
        level = 1;
      }
      s = '';
      if (level > 0) {
        s = '                                                   '.substr(0, level * spacesPerlevel);
      }
      return s;
    };
    currLevel = -1;
    for (i in array) {
      line = array[i];
      heading = line.replace(/^\s+/g, "");
      if (!heading.length) {
        continue;
      }
      level = ((line.length - heading.length) / spacesPerlevel) + 1;
      if (level !== currLevel) {
        if (level === 1 || currLevel === -1) {
          level = 1;
          outL.push('ul.l1');
          outL.push(indent() + 'li.l1');
          outL.push(indent(2) + '| ' + heading);
          currLevel = 1;
        } else if (level > currLevel) {
          level = currLevel = currLevel + 1;
          outL.push(indent(currLevel + currLevel - 2) + 'ul.l' + level);
          outL.push(indent(currLevel + currLevel - 1) + 'li.l' + level);
          outL.push(indent(currLevel + currLevel) + '| ' + heading);
        } else {
          currLevel = level;
          outL.push(indent(currLevel + currLevel - 1) + 'li.l' + level);
          outL.push(indent(currLevel + currLevel) + '| ' + heading);
        }
      } else {
        outL.push(indent(currLevel + currLevel - 1) + 'li.l' + level);
        outL.push(indent(currLevel + currLevel) + '| ' + heading);
      }
    }
    jadeStr = '!!! 5\nhtml\n  head\n    meta(charset="utf-8")\n    link(rel=\'stylesheet\', media=\'screen\', href=\'../ol.css\')\n  body(lang=\'en\')\n';
    for (_i = 0, _len = outL.length; _i < _len; _i++) {
      line = outL[_i];
      jadeStr += baseIndent + line + "\n";
    }
    return fs.writeFile(path.join(dstPath, fileNameOnly + '.jade'), jadeStr, function(err) {
      if (err) {
        return console.log('err', err);
      }
    });
  };

  exports.parse = function(srcPath, dstPath) {
    return grunt.file.recurse(srcPath, function(abspath, rootdir, subdir, filename) {
      if (grunt.file.isMatch('*.ol', filename)) {
        return parseOl(rootdir, subdir, filename, dstPath);
      }
    });
  };

}).call(this);
