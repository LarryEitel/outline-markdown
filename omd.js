// Generated by CoffeeScript 1.3.3
(function() {
  var Omd, fs, fse, grunt, path, stripFileExtension;

  path = require('path');

  fs = require('fs');

  fse = require('fs-extra');

  grunt = require("grunt");

  stripFileExtension = function(filename) {
    var fsplit;
    fsplit = filename.split('.');
    fsplit.pop();
    return fsplit.join('.');
  };

  Omd = (function() {

    function Omd() {
      this.srcName = null;
      this.dstName = null;
      this.baseIndent = Array(5).join(' ');
      this.outL = [];
      this.spacesPerlevel = 2;
    }

    Omd.prototype.indentSpaces = function(level) {
      var s;
      if (level == null) {
        level = 1;
      }
      s = '';
      if (level > 0) {
        s = '                                                   '.substr(0, level * this.spacesPerlevel);
      }
      return s;
    };

    Omd.prototype.parseLines = function(srcLinesArray) {
      var currLevel, heading, i, level, line, outL;
      currLevel = -1;
      outL = [];
      for (i in srcLinesArray) {
        line = srcLinesArray[i];
        heading = line.replace(/^\s+/g, "");
        if (!heading.length) {
          continue;
        }
        level = ((line.length - heading.length) / this.spacesPerlevel) + 1;
        if (level !== currLevel) {
          if (level === 1 || currLevel === -1) {
            level = 1;
            outL.push('ul.l1');
            outL.push(this.indentSpaces() + 'li.l1');
            outL.push(this.indentSpaces(2) + '| ' + heading);
            currLevel = 1;
          } else if (level > currLevel) {
            level = currLevel = currLevel + 1;
            outL.push(this.indentSpaces(currLevel + currLevel - 2) + 'ul.l' + level);
            outL.push(this.indentSpaces(currLevel + currLevel - 1) + 'li.l' + level);
            outL.push(this.indentSpaces(currLevel + currLevel) + '| ' + heading);
          } else {
            currLevel = level;
            outL.push(this.indentSpaces(currLevel + currLevel - 1) + 'li.l' + level);
            outL.push(this.indentSpaces(currLevel + currLevel) + '| ' + heading);
          }
        } else {
          outL.push(this.indentSpaces(currLevel + currLevel - 1) + 'li.l' + level);
          outL.push(this.indentSpaces(currLevel + currLevel) + '| ' + heading);
        }
      }
      return outL;
    };

    Omd.prototype.prependLines = function(outL) {
      var jadeStr, line, _i, _len;
      jadeStr = '!!! 5\nhtml\n  head\n    meta(charset="utf-8")\n    link(rel=\'stylesheet\', media=\'screen\', href=\'/ol.css\')\n  body(lang=\'en\')\n';
      for (_i = 0, _len = outL.length; _i < _len; _i++) {
        line = outL[_i];
        jadeStr += this.baseIndent + line + "\n";
      }
      return jadeStr;
    };

    Omd.prototype.buildJade = function(outL) {
      fse.mkdirSync(this.dstPath);
      return fs.writeFileSync(this.dstName, this.prependLines(outL), 'utf8');
    };

    Omd.prototype.parse = function(srcName, dstPath, callback) {
      var data, filename, srcLinesArray;
      this.srcName = srcName;
      this.dstPath = dstPath;
      filename = this.srcName.split(path.sep).pop();
      this.dstName = path.join(this.dstPath, filename.substr(0, filename.length - 4) + '.jade');
      data = fs.readFileSync(this.srcName, 'utf8');
      srcLinesArray = data.toString().split("\n");
      this.buildJade(this.parseLines(srcLinesArray), function(err) {
        if (err) {
          return err;
        }
      });
      return callback();
    };

    return Omd;

  })();

  exports.Omd = Omd;

}).call(this);
