// Generated by CoffeeScript 1.3.3
(function() {
  var dstIndexFile, dstJadeFile, dstPath, fs, omd, path, srcBasePath, srcName, srcPath, testFile, testJadeFile;

  path = require('path');

  fs = require("fs");

  testFile = 'test.omd';

  srcBasePath = 'docs';

  srcPath = path.join(__dirname, 'docs');

  srcName = path.join(srcPath, testFile);

  dstPath = path.join(__dirname, 'views', 'docs');

  dstJadeFile = path.join(dstPath, 'test.jade');

  dstIndexFile = path.join(dstPath, 'index.jade');

  testJadeFile = path.join(dstPath, 'test.should.equal.jade');

  omd = new (require('../omd')).Omd;

  describe('When crawling for files', function() {
    before(function(done) {
      if (fs.existsSync(dstIndexFile)) {
        fs.unlinkSync(dstIndexFile);
      }
      return done();
    });
    it("should return a valid array of found files", function() {
      var testStr;
      testStr = '';
      return omd.crawlForFiles(srcPath, function(callback) {
        var file, files, _i, _len;
        files = callback;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          testStr += file.fPath;
        }
        return testStr.should.equal('d1/d1-ad1/d1-bd1/d11/d11-ad1/d11/d11-bd1/d12/d12-ad1/d12/d12-bd1/d12/d121/d121-atest');
      });
    });
    return it("should create a .jade file with listing of all .oml documents", function() {
      return omd.buildIndex(srcBasePath, srcPath, dstPath, function(callback) {
        return fs.existsSync(dstIndexFile).should.equal(true);
      });
    });
  });

  describe('Sample ' + testFile, function() {
    before(function(done) {
      if (fs.existsSync(dstJadeFile)) {
        fs.unlinkSync(dstJadeFile);
      }
      return done();
    });
    return describe('when parsing', function() {
      before(function(done) {
        omd.parse(srcName, dstPath, function(callback) {});
        return done();
      });
      it("should be generate a .jade file", function() {
        return fs.existsSync(dstJadeFile).should.equal(true);
      });
      return it("should be valid", function() {
        var dstJadeFileStr, testJadeFileStr;
        testJadeFileStr = fs.readFileSync(testJadeFile).toString();
        dstJadeFileStr = fs.readFileSync(dstJadeFile).toString();
        return dstJadeFileStr.length.should.equal(670);
      });
    });
  });

}).call(this);
