// Generated by CoffeeScript 1.3.3
(function() {
  var Q, dstPath, fs, opts, otl, path, request, rootdir, srcName, subdir;

  path = require('path');

  request = require('request');

  fs = require("fs");

  Q = require("q");

  require("mocha-as-promised")();

  rootdir = './test/docs';

  subdir = '';

  srcName = 'otl.ol';

  dstPath = './test/views/docs';

  require('../otl');

  opts = {
    rootdir: rootdir,
    subdir: subdir,
    srcName: srcName,
    dstPath: dstPath
  };

  otl = new (require('../otl')).Otl(opts);

  describe('Sample otl.ol', function() {
    it('should exist', function() {
      return fs.existsSync(path.join(rootdir, subdir, srcName)).should.equal(true);
    });
    return describe('when parsing', function() {
      var controlJadeFile, expectedJadeFile, srcJadeFile;
      srcJadeFile = path.join(rootdir, subdir, srcName);
      controlJadeFile = path.join(dstPath, subdir, 'otl.should.equal.jade');
      expectedJadeFile = path.join(dstPath, subdir, otl.fileNameOnly) + '.jade';
      before(function(done) {
        if (fs.existsSync(expectedJadeFile)) {
          fs.unlinkSync(expectedJadeFile);
        }
        otl.parse(function() {});
        return done();
      });
      it("should be generate a .jade file", function() {
        return fs.existsSync(expectedJadeFile).should.equal(true);
      });
      return it("should be valid", function() {
        var controlJadeStr, generatedJadeStr;
        controlJadeStr = fs.readFileSync(controlJadeFile).toString();
        generatedJadeStr = fs.readFileSync(expectedJadeFile).toString();
        return generatedJadeStr.length.should.equal(670);
      });
    });
  });

}).call(this);
